"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–Ω–∞
"""
import streamlit as st
import requests
import pandas as pd
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Wine Quality Prediction",
    page_icon="üç∑",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üç∑ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ö–∞—á–µ—Å—Ç–≤–∞ –í–∏–Ω–∞")
st.markdown("---")

# URL API (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Docker)
API_URL = "http://api:8000"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def get_prediction(features):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    try:
        response = requests.post(
            f"{API_URL}/predict",
            json=features,
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìä –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.form("wine_features_form"):
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—è –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        col_left, col_right = st.columns(2)
        
        with col_left:
            fixed_acidity = st.number_input(
                "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å (g/dm¬≥)",
                min_value=0.0,
                max_value=20.0,
                value=7.0,
                step=0.1,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç –≤ –≤–∏–Ω–µ"
            )
            
            volatile_acidity = st.number_input(
                "–õ–µ—Ç—É—á–∞—è –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å (g/dm¬≥)",
                min_value=0.0,
                max_value=2.0,
                value=0.3,
                step=0.01,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç—É—á–∏—Ö –∫–∏—Å–ª–æ—Ç"
            )
            
            citric_acid = st.number_input(
                "–õ–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞ (g/dm¬≥)",
                min_value=0.0,
                max_value=1.0,
                value=0.3,
                step=0.01,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–º–æ–Ω–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã"
            )
            
            residual_sugar = st.number_input(
                "–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–∞—Ö–∞—Ä (g/dm¬≥)",
                min_value=0.0,
                max_value=20.0,
                value=2.0,
                step=0.1,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ö–∞—Ä–∞ –ø–æ—Å–ª–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏"
            )
            
            chlorides = st.number_input(
                "–•–ª–æ—Ä–∏–¥—ã (g/dm¬≥)",
                min_value=0.0,
                max_value=1.0,
                value=0.05,
                step=0.001,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª–æ—Ä–∏–¥–æ–≤"
            )
            
            free_sulfur_dioxide = st.number_input(
                "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã (mg/dm¬≥)",
                min_value=0.0,
                max_value=100.0,
                value=15.0,
                step=1.0,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ SO2"
            )
        
        with col_right:
            total_sulfur_dioxide = st.number_input(
                "–û–±—â–∏–π –¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã (mg/dm¬≥)",
                min_value=0.0,
                max_value=300.0,
                value=50.0,
                step=1.0,
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SO2"
            )
            
            density = st.number_input(
                "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (g/cm¬≥)",
                min_value=0.9,
                max_value=1.1,
                value=0.997,
                step=0.001,
                help="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∏–Ω–∞"
            )
            
            ph = st.number_input(
                "pH",
                min_value=2.0,
                max_value=5.0,
                value=3.2,
                step=0.01,
                help="–ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∏–Ω–∞"
            )
            
            sulphates = st.number_input(
                "–°—É–ª—å—Ñ–∞—Ç—ã (g/dm¬≥)",
                min_value=0.0,
                max_value=2.0,
                value=0.6,
                step=0.01,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–ª—å—Ñ–∞—Ç–æ–≤"
            )
            
            alcohol = st.number_input(
                "–ê–ª–∫–æ–≥–æ–ª—å (% vol)",
                min_value=8.0,
                max_value=15.0,
                value=10.5,
                step=0.1,
                help="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è"
            )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        submitted = st.form_submit_button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–Ω–∞", use_container_width=True)

with col2:
    st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if check_api_health():
        st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        st.stop()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if submitted:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        features = {
            "fixed_acidity": fixed_acidity,
            "volatile_acidity": volatile_acidity,
            "citric_acid": citric_acid,
            "residual_sugar": residual_sugar,
            "chlorides": chlorides,
            "free_sulfur_dioxide": free_sulfur_dioxide,
            "total_sulfur_dioxide": total_sulfur_dioxide,
            "density": density,
            "ph": ph,
            "sulphates": sulphates,
            "alcohol": alcohol
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–Ω–∞..."):
            result = get_prediction(features)
        
        if result:
            prediction = result["prediction"]
            confidence = result["confidence"]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.markdown("### üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            if prediction >= 7:
                st.success(f"**–ö–∞—á–µ—Å—Ç–≤–æ: {prediction}/10** ‚≠ê")
                st.success("–û—Ç–ª–∏—á–Ω–æ–µ –≤–∏–Ω–æ!")
            elif prediction >= 5:
                st.warning(f"**–ö–∞—á–µ—Å—Ç–≤–æ: {prediction}/10** ‚≠ê")
                st.warning("–•–æ—Ä–æ—à–µ–µ –≤–∏–Ω–æ")
            else:
                st.error(f"**–ö–∞—á–µ—Å—Ç–≤–æ: {prediction}/10** ‚≠ê")
                st.error("–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            st.markdown("### üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
            confidence_percent = confidence * 100
            st.progress(confidence)
            st.write(f"{confidence_percent:.1f}%")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.markdown("### ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.info(f"–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–Ω–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10, –≥–¥–µ 10 - –Ω–∞–∏–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
st.markdown("---")
st.header("ü§ñ –û –º–æ–¥–µ–ª–∏")

col_info1, col_info2 = st.columns(2)

with col_info1:
    st.markdown("""
    **–ê–ª–≥–æ—Ä–∏—Ç–º:** Random Forest Classifier
    
    **–î–∞—Ç–∞—Å–µ—Ç:** Wine Quality Dataset
    
    **–ü—Ä–∏–∑–Ω–∞–∫–∏:**
    - –§–∏–∑–∏–∫–æ-—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–∏–Ω–∞
    - 11 —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    """)

with col_info2:
    st.markdown("""
    **–¶–µ–ª—å:** –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–Ω–∞
    
    **–®–∫–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** 0-10 –±–∞–ª–ª–æ–≤
    
    **–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** ~65-70%
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray;'>
    <p>üç∑ Wine Quality Prediction App | Powered by Machine Learning</p>
</div>
""", unsafe_allow_html=True)
